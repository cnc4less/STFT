#include "Arduino.h"

#include <stft.h>

/*
        Wiring of ILI9341 display:

        Display         Arduino
       ======================================================================================
        SDO/MISO        12 - fixed
        LED             +3.3V or PWM (Attention! Needs more than the max 40mA an Arduino pin can deliver!)
        SCK             13 - fixed
        SDI/MOSI        11 - fixed
        D/C             9 - fourth parameter below
        RESET           2 - third parameter below
        CS              10 - second parameter below
        GND             GND
        VCC             +3.3V


        Wiring of ST7735 display:
        
        Display         Arduino
       ======================================================================================
        GND             GND
        VCC             +3.3V
        RESET           2 - third parameter below
        AO              9 - fourth parameter below
        SDA             11 - fixed
        SCK             13 - fixed
        CS              10 - second parameter below
        LED+            +3.3V or PWM
        LED-            GND
*/

// ST7735 display
//#define WIDTH 128
//#define HEIGHT 160
//STFT tft(ST7735, 10, 2, 9);

// ILI9341 display
#define WIDTH 240
#define HEIGHT 320
STFT tft(ILI9341, 10, 2, 9);


static const uint8_t sinus_table[ 0x100 ] PROGMEM = {
  0x80, 0x7d, 0x7a, 0x77, 0x74, 0x70, 0x6d, 0x6a, 0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52,
  0x4f, 0x4d, 0x4a, 0x47, 0x44, 0x41, 0x3f, 0x3c, 0x39, 0x37, 0x34, 0x32, 0x2f, 0x2d, 0x2b, 0x28,
  0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16, 0x15, 0x13, 0x11, 0x10, 0x0f, 0x0d, 0x0c,
  0x0b, 0x0a, 0x08, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03, 0x03, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01,
  0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x0a,
  0x0b, 0x0c, 0x0d, 0x0f, 0x10, 0x11, 0x13, 0x15, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24,
  0x26, 0x28, 0x2b, 0x2d, 0x2f, 0x32, 0x34, 0x37, 0x39, 0x3c, 0x3f, 0x41, 0x44, 0x47, 0x4a, 0x4d,
  0x4f, 0x52, 0x55, 0x58, 0x5b, 0x5e, 0x61, 0x64, 0x67, 0x6a, 0x6d, 0x70, 0x74, 0x77, 0x7a, 0x7d,
  0x80, 0x83, 0x86, 0x89, 0x8c, 0x90, 0x93, 0x96, 0x99, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae,
  0xb1, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4, 0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8,
  0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xeb, 0xed, 0xef, 0xf0, 0xf1, 0xf3, 0xf4,
  0xf5, 0xf6, 0xf8, 0xf9, 0xfa, 0xfa, 0xfb, 0xfc, 0xfd, 0xfd, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfd, 0xfd, 0xfc, 0xfb, 0xfa, 0xfa, 0xf9, 0xf8, 0xf6,
  0xf5, 0xf4, 0xf3, 0xf1, 0xf0, 0xef, 0xed, 0xeb, 0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc,
  0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9, 0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3,
  0xb1, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c, 0x99, 0x96, 0x93, 0x90, 0x8c, 0x89, 0x86, 0x83,
};

const uint16_t color_table[] PROGMEM = {
  0xf800, 0xf820, 0xf860, 0xf880, 0xf8c0, 0xf8e0, 0xf920, 0xf940, 0xf980, 0xf9a0, 0xf9e0, 0xfa00, 0xfa40, 0xfa60, 0xfaa0, 0xfac0,
  0xfb00, 0xfb20, 0xfb60, 0xfb80, 0xfbc0, 0xfbe0, 0xfc20, 0xfc40, 0xfc80, 0xfca0, 0xfce0, 0xfd00, 0xfd40, 0xfd60, 0xfda0, 0xfdc0,
  0xfe00, 0xfe20, 0xfe60, 0xfe80, 0xfec0, 0xfee0, 0xff20, 0xff40, 0xff80, 0xffa0, 0xffe0, 0xffe0, 0xffe0, 0xf7e0, 0xefe0, 0xe7e0,
  0xe7e0, 0xdfe0, 0xd7e0, 0xcfe0, 0xcfe0, 0xc7e0, 0xbfe0, 0xb7e0, 0xb7e0, 0xafe0, 0xa7e0, 0x9fe0, 0x9fe0, 0x97e0, 0x8fe0, 0x87e0,
  0x87e0, 0x7fe0, 0x77e0, 0x6fe0, 0x6fe0, 0x67e0, 0x5fe0, 0x57e0, 0x57e0, 0x4fe0, 0x47e0, 0x3fe0, 0x3fe0, 0x37e0, 0x2fe0, 0x27e0,
  0x27e0, 0x1fe0, 0x17e0, 0x0fe0, 0x0fe0, 0x07e0, 0x07e0, 0x07e0, 0x07e1, 0x07e2, 0x07e3, 0x07e3, 0x07e4, 0x07e5, 0x07e6, 0x07e6,
  0x07e7, 0x07e8, 0x07e9, 0x07e9, 0x07ea, 0x07eb, 0x07ec, 0x07ec, 0x07ed, 0x07ee, 0x07ef, 0x07ef, 0x07f0, 0x07f1, 0x07f2, 0x07f2,
  0x07f3, 0x07f4, 0x07f5, 0x07f5, 0x07f6, 0x07f7, 0x07f8, 0x07f8, 0x07f9, 0x07fa, 0x07fb, 0x07fb, 0x07fc, 0x07fd, 0x07fe, 0x07fe,
  0x07ff, 0x07df, 0x079f, 0x077f, 0x073f, 0x071f, 0x06df, 0x06bf, 0x067f, 0x065f, 0x061f, 0x05ff, 0x05bf, 0x059f, 0x055f, 0x053f,
  0x04ff, 0x04df, 0x049f, 0x047f, 0x043f, 0x041f, 0x03df, 0x03bf, 0x037f, 0x035f, 0x031f, 0x02ff, 0x02bf, 0x029f, 0x025f, 0x023f,
  0x01ff, 0x01df, 0x019f, 0x017f, 0x013f, 0x011f, 0x00df, 0x00bf, 0x007f, 0x005f, 0x001f, 0x001f, 0x001f, 0x081f, 0x101f, 0x181f,
  0x181f, 0x201f, 0x281f, 0x301f, 0x301f, 0x381f, 0x401f, 0x481f, 0x481f, 0x501f, 0x581f, 0x601f, 0x601f, 0x681f, 0x701f, 0x781f,
  0x781f, 0x801f, 0x881f, 0x901f, 0x901f, 0x981f, 0xa01f, 0xa81f, 0xa81f, 0xb01f, 0xb81f, 0xc01f, 0xc01f, 0xc81f, 0xd01f, 0xd81f,
  0xd81f, 0xe01f, 0xe81f, 0xf01f, 0xf01f, 0xf81f, 0xf81f, 0xf81f, 0xf81e, 0xf81d, 0xf81c, 0xf81c, 0xf81b, 0xf81a, 0xf819, 0xf819,
  0xf818, 0xf817, 0xf816, 0xf816, 0xf815, 0xf814, 0xf813, 0xf813, 0xf812, 0xf811, 0xf810, 0xf810, 0xf80f, 0xf80e, 0xf80d, 0xf80d,
  0xf80c, 0xf80b, 0xf80a, 0xf80a, 0xf809, 0xf808, 0xf807, 0xf807, 0xf806, 0xf805, 0xf804, 0xf804, 0xf803, 0xf802, 0xf801, 0xf801,
};

#define trans(v) { SPDR = v; __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); __asm__("nop"); }
#define trans2(v) { SPDR = v; }

void image()
{
  static uint8_t c1a, c1b;
  static uint8_t c2a, c2b;
  static uint8_t c1A, c1B;
  static uint8_t c2A, c2B;
  static uint8_t offset = 0;
  static uint8_t xbuf[240]; // we could malloc the right size, but this would include malloc, which is another 500 byte
  static uint8_t ybuf[320];


  uint8_t index;
  uint16_t color;

  uint8_t x;
  uint16_t y;

  tft.startRaw((tft.width - WIDTH)/2, (tft.height - HEIGHT)/2, (tft.width + WIDTH)/2 - 1, (tft.height + HEIGHT)/2 - 1);
  
  c1a = c1A;
  c1b = c1B;
  for ( y = 0; y < HEIGHT; ++y )
  {
    ybuf[ y ] = ( pgm_read_byte(&sinus_table[ c1a ]) + pgm_read_byte(&sinus_table[ c1b ]) ) >> 1;
    c1a += 1;
    c1b += 2;
  }
  c1A += 2;
  c1B -= 3;

  c2a = c2A;
  c2b = c2B;
  for ( x = 0; x < WIDTH; ++x )
  {
    xbuf[ x ] = ( pgm_read_byte(&sinus_table[ c2a ]) + pgm_read_byte(&sinus_table[ c2b ]) ) >> 1;
    c2a += 1;
    c2b += 2;
  }
  c2A -= 4;
  c2B += 1;

  for ( y = 0; y < HEIGHT; ++y )
  {
    for ( x = 0; x < WIDTH; ++x )
    {
      index = ( ( xbuf[ x ] + ybuf[ y ] ) >> 1 ) + offset;

      color = pgm_read_word(&color_table[index]);

      SPIFastWrite(color >> 8); NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; NOP; // 17 NOPs
      SPIFastWrite(color&0xFF);
    }
  }

  offset++;

  tft.endRaw();
}

void setup()
{                
  Serial.begin(9600);

  tft.init();
  tft.clrScr();
}

uint32_t cnt = 0;

void loop()
{
  image();

  cnt+= 1;

  if ((cnt&15) == 0)
    Serial.println(micros() / cnt, DEC);
}


